import pandas as pd
import numpy as np
from Bio import SeqIO
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Load the data
# Replace 'your_protein_sequences.fasta' and 'your_binding_sites.csv' with the paths to your dataset files
sequences = list(SeqIO.parse('your_protein_sequences.fasta', 'fasta'))
binding_sites = pd.read_csv('your_binding_sites.csv', index_col=0)

# Sequence-based feature extraction (amino acid composition)
def extract_features(sequence):
    amino_acids = 'ACDEFGHIKLMNPQRSTVWY'
    features = [sequence.count(aa) / len(sequence) for aa in amino_acids]
    return features

feature_matrix = np.array([extract_features(str(seq_record.seq)) for seq_record in sequences])

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(feature_matrix, binding_sites, test_size=0.2, random_state=42)

# Train a Random Forest classifier
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train, y_train.values.ravel())

# Evaluate the model
y_pred = clf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted')
recall = recall_score(y_test, y_pred, average='weighted')
f1 = f1_score(y_test, y_pred, average='weighted')

print(f'Accuracy: {accuracy:.2f}')
print(f'Precision: {precision:.2f}')
print(f'Recall: {recall:.2f}')
print(f'F1-score: {f1:.2f}')

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)
conf_matrix_df = pd.DataFrame(conf_matrix, index=binding_sites['binding_site'].unique(), columns=binding_sites['binding_site'].unique())

# Plot confusion matrix
plt.figure(figsize=(10, 8))
sns.heatmap(conf_matrix_df, annot=True, cmap='Blues', fmt='d')
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.title('Confusion Matrix')
plt.show()

# Feature importances
importances = clf.feature_importances_
amino_acids = 'ACDEFGHIKLMNPQRSTVWY'
features = list(amino_acids)

# Visualize feature importances
plt.figure(figsize=(12, 6))
sns.barplot(x=features, y=importances)
plt.xlabel('Amino Acids')
plt.ylabel('Feature Importance')
plt.title('Random Forest Feature Importances')
plt.show()
