import numpy as np
import pandas as pd
import scanpy as sc
import matplotlib.pyplot as plt
import seaborn as sns

# Read the data
# Replace 'your_data_file.h5' with the path to your dataset file
adata = sc.read('your_data_file.h5')

# Data preprocessing
sc.pp.filter_cells(adata, min_genes=200)
sc.pp.filter_genes(adata, min_cells=3)
adata.raw = adata
sc.pp.normalize_per_cell(adata, counts_per_cell_after=1e4)
sc.pp.log1p(adata)
sc.pp.highly_variable_genes(adata, min_mean=0.0125, max_mean=3, min_disp=0.5)
adata = adata[:, adata.var['highly_variable']]
sc.pp.scale(adata, max_value=10)

# Dimensionality reduction
sc.tl.pca(adata, svd_solver='arpack')
sc.pp.neighbors(adata, n_neighbors=10, n_pcs=40)

# Clustering
sc.tl.umap(adata)
sc.tl.leiden(adata)

# Cell type identification (using known marker genes)
marker_genes = {
    'Cell_Type_A': ['GeneA1', 'GeneA2', 'GeneA3'],
    'Cell_Type_B': ['GeneB1', 'GeneB2', 'GeneB3'],
    'Cell_Type_C': ['GeneC1', 'GeneC2', 'GeneC3'],
}
sc.tl.rank_genes_groups(adata, 'leiden', method='t-test')
sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False)

# Assign cell types to clusters
adata.obs['cell_type'] = adata.obs['leiden']
for cell_type, markers in marker_genes.items():
    for marker in markers:
        adata.obs.loc[adata.raw.obs_vector(marker).values > 1, 'cell_type'] = cell_type

# Visualization
sc.pl.umap(adata, color=['leiden', 'cell_type'], legend_loc='on data', title='', frameon=False)
sc.pl.stacked_violin(adata, marker_genes, groupby='cell_type', dendrogram=True)

from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score

# Evaluation
# Replace 'your_annotation_file.csv' with the path to your cell type annotation file
cell_type_annotation = pd.read_csv('your_annotation_file.csv', index_col=0)

# Make sure the index of 'cell_type_annotation' matches the index of 'adata.obs'
assert all(adata.obs.index == cell_type_annotation.index)

true_labels = cell_type_annotation['cell_type']
predicted_labels = adata.obs['cell_type']

# Calculate evaluation metrics
accuracy = accuracy_score(true_labels, predicted_labels)
precision = precision_score(true_labels, predicted_labels, average='weighted')
recall = recall_score(true_labels, predicted_labels, average='weighted')
f1 = f1_score(true_labels, predicted_labels, average='weighted')

print(f'Accuracy: {accuracy:.2f}')
print(f'Precision: {precision:.2f}')
print(f'Recall: {recall:.2f}')
print(f'F1-score: {f1:.2f}')

# Create a confusion matrix
conf_matrix = confusion_matrix(true_labels, predicted_labels, labels=list(marker_genes.keys()))
conf_matrix_df = pd.DataFrame(conf_matrix, index=list(marker_genes.keys()), columns=list(marker_genes.keys()))

# Plot confusion matrix
plt.figure(figsize=(10, 8))
sns.heatmap(conf_matrix_df, annot=True, cmap='Blues', fmt='d')
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.title('Confusion Matrix')
plt.show()
